/**
 * Debug User State - Ferramentas de debug para estado do usu√°rio
 * 
 * Este arquivo fornece ferramentas de debug para testar e monitorar
 * a consist√™ncia de dados do usu√°rio entre componentes.
 */

import type { User } from "@/lib/auth-client"

export interface DebugUserState {
  // Informa√ß√µes gerais
  getInfo(): Promise<object>
  
  // Controle de monitoramento
  startMonitoring(): Promise<void>
  stopMonitoring(): Promise<void>
  
  // Verifica√ß√µes manuais
  checkConsistency(): Promise<object>
  compareComponents(): Promise<object>
  
  // A√ß√µes de corre√ß√£o
  forceSync(): Promise<void>
  autoFix(): Promise<boolean>
  
  // M√©tricas e hist√≥rico
  getMetrics(): any[]
  getInconsistencyHistory(): any[]
  clearHistory(): void
  
  // Simula√ß√£o de problemas (apenas desenvolvimento)
  simulateInconsistency(): Promise<void>
  simulateNetworkError(): Promise<void>
}

class DebugUserStateImpl implements DebugUserState {
  
  /**
   * Obt√©m informa√ß√µes completas do estado atual
   */
  async getInfo(): Promise<object> {
    try {
      const { default: userStateManager } = await import("@/lib/user-state-manager")
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      const userStateInfo = userStateManager.getDebugInfo()
      const validatorInfo = dataConsistencyValidator.getDebugInfo()
      
      return {
        timestamp: new Date().toISOString(),
        userStateManager: userStateInfo,
        dataConsistencyValidator: validatorInfo,
        browser: {
          userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'N/A',
          online: typeof window !== 'undefined' ? window.navigator.onLine : true,
          cookiesEnabled: typeof window !== 'undefined' ? window.navigator.cookieEnabled : true
        }
      }
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao obter informa√ß√µes', error)
      return { error: error.message }
    }
  }

  /**
   * Inicia monitoramento autom√°tico
   */
  async startMonitoring(): Promise<void> {
    try {
      const { default: userStateManager } = await import("@/lib/user-state-manager")
      
      userStateManager.startHealthCheck()
      console.log('‚úÖ DebugUserState: Monitoramento iniciado')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao iniciar monitoramento', error)
    }
  }

  /**
   * Para monitoramento autom√°tico
   */
  async stopMonitoring(): Promise<void> {
    try {
      const { default: userStateManager } = await import("@/lib/user-state-manager")
      
      userStateManager.stopHealthCheck()
      console.log('‚úÖ DebugUserState: Monitoramento parado')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao parar monitoramento', error)
    }
  }

  /**
   * Executa verifica√ß√£o manual de consist√™ncia
   */
  async checkConsistency(): Promise<object> {
    try {
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      console.log('üîç DebugUserState: Executando verifica√ß√£o de consist√™ncia manual')
      const report = await dataConsistencyValidator.validateConsistency()
      
      console.log('üìä DebugUserState: Relat√≥rio de consist√™ncia', report)
      return report
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na verifica√ß√£o de consist√™ncia', error)
      return { error: error.message }
    }
  }

  /**
   * Compara dados entre componentes
   */
  async compareComponents(): Promise<object> {
    try {
      const { default: userStateManager } = await import("@/lib/user-state-manager")
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      // Obter dados de diferentes fontes
      const userStateData = userStateManager.getCurrentUser()
      const serverData = await this.getUserFromServer()
      
      // Comparar dados
      const discrepancies = dataConsistencyValidator.detectDiscrepancies(userStateData, serverData)
      
      const comparison = {
        timestamp: new Date().toISOString(),
        userStateManager: {
          data: userStateData ? {
            uid: userStateData.uid,
            nome: userStateData.nome,
            perfis: userStateData.perfis,
            email: userStateData.email
          } : null,
          source: 'UserStateManager'
        },
        server: {
          data: serverData ? {
            uid: serverData.uid,
            nome: serverData.nome,
            perfis: serverData.perfis,
            email: serverData.email
          } : null,
          source: 'Server API'
        },
        discrepancies,
        isConsistent: discrepancies.length === 0
      }
      
      console.log('üîç DebugUserState: Compara√ß√£o de componentes', comparison)
      return comparison
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na compara√ß√£o de componentes', error)
      return { error: error.message }
    }
  }

  /**
   * For√ßa sincroniza√ß√£o manual
   */
  async forceSync(): Promise<void> {
    try {
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      console.log('üîÑ DebugUserState: For√ßando sincroniza√ß√£o manual')
      await dataConsistencyValidator.forceSynchronization()
      console.log('‚úÖ DebugUserState: Sincroniza√ß√£o manual conclu√≠da')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na sincroniza√ß√£o manual', error)
    }
  }

  /**
   * Executa auto-corre√ß√£o manual
   */
  async autoFix(): Promise<boolean> {
    try {
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      console.log('üîß DebugUserState: Executando auto-corre√ß√£o manual')
      const success = await dataConsistencyValidator.autoCorrect()
      
      console.log(success ? '‚úÖ' : '‚ùå', 'DebugUserState: Auto-corre√ß√£o', success ? 'bem-sucedida' : 'falhou')
      return success
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na auto-corre√ß√£o', error)
      return false
    }
  }

  /**
   * Obt√©m m√©tricas de consist√™ncia
   */
  getMetrics(): any[] {
    try {
      if (typeof window === 'undefined') return []
      
      const metrics = JSON.parse(localStorage.getItem('consistency_metrics') || '[]')
      console.log('üìä DebugUserState: M√©tricas de consist√™ncia', { count: metrics.length })
      return metrics
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao obter m√©tricas', error)
      return []
    }
  }

  /**
   * Obt√©m hist√≥rico de inconsist√™ncias
   */
  async getInconsistencyHistory(): Promise<any[]> {
    try {
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      const history = dataConsistencyValidator.getInconsistencyHistory()
      console.log('üìã DebugUserState: Hist√≥rico de inconsist√™ncias', { count: history.length })
      return history
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao obter hist√≥rico', error)
      return []
    }
  }

  /**
   * Limpa hist√≥rico de inconsist√™ncias
   */
  async clearHistory(): Promise<void> {
    try {
      const { default: userStateManager } = await import("@/lib/user-state-manager")
      const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
      
      userStateManager.clearConsistencyMetrics()
      dataConsistencyValidator.clearInconsistencyHistory()
      
      console.log('üßπ DebugUserState: Hist√≥rico limpo')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao limpar hist√≥rico', error)
    }
  }

  /**
   * Simula inconsist√™ncia para teste (apenas desenvolvimento)
   */
  async simulateInconsistency(): Promise<void> {
    if (process.env.NODE_ENV !== 'development') {
      console.warn('‚ö†Ô∏è DebugUserState: Simula√ß√£o dispon√≠vel apenas em desenvolvimento')
      return
    }

    try {
      console.log('üé≠ DebugUserState: Simulando inconsist√™ncia para teste')
      
      // Esta fun√ß√£o seria implementada para for√ßar dados diferentes
      // entre componentes para testar a detec√ß√£o
      console.warn('‚ö†Ô∏è DebugUserState: Simula√ß√£o de inconsist√™ncia n√£o implementada ainda')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na simula√ß√£o', error)
    }
  }

  /**
   * Simula erro de rede para teste
   */
  async simulateNetworkError(): Promise<void> {
    if (process.env.NODE_ENV !== 'development') {
      console.warn('‚ö†Ô∏è DebugUserState: Simula√ß√£o dispon√≠vel apenas em desenvolvimento')
      return
    }

    try {
      console.log('üé≠ DebugUserState: Simulando erro de rede para teste')
      
      // Esta fun√ß√£o seria implementada para simular falhas de rede
      console.warn('‚ö†Ô∏è DebugUserState: Simula√ß√£o de erro de rede n√£o implementada ainda')
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro na simula√ß√£o', error)
    }
  }

  /**
   * Obt√©m dados diretamente do servidor
   */
  private async getUserFromServer(): Promise<User | null> {
    try {
      const response = await fetch('/api/auth/me', {
        method: 'GET',
        credentials: 'include'
      })

      if (response.status === 401) {
        console.log('‚ÑπÔ∏è DebugUserState: Usu√°rio n√£o autenticado')
        return null
      }

      if (response.status === 404) {
        console.warn('‚ö†Ô∏è DebugUserState: Rota n√£o encontrada')
        return null
      }

      if (!response.ok) {
        console.warn('‚ö†Ô∏è DebugUserState: Falha ao obter dados do servidor', response.status)
        return null
      }

      const data = await response.json()
      return data.user || null
    } catch (error) {
      console.error('‚ùå DebugUserState: Erro ao obter dados do servidor', error)
      return null
    }
  }
}

// Inst√¢ncia singleton
const debugUserState = new DebugUserStateImpl()

// Adicionar ao window para debug (apenas em desenvolvimento)
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  (window as any).debugUserState = debugUserState
}

export default debugUserState