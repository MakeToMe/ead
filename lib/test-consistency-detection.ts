/**
 * Teste da Detec√ß√£o Autom√°tica de Inconsist√™ncias
 * 
 * Este arquivo demonstra como testar a funcionalidade de detec√ß√£o
 * autom√°tica de inconsist√™ncias implementada.
 */

export async function testConsistencyDetection() {
  console.log('üß™ Iniciando teste de detec√ß√£o de inconsist√™ncias')
  
  try {
    // 1. Importar m√≥dulos necess√°rios
    const { default: userStateManager } = await import("@/lib/user-state-manager")
    const { default: dataConsistencyValidator } = await import("@/lib/data-consistency-validator")
    const { default: debugUserState } = await import("@/lib/debug-user-state")
    
    console.log('‚úÖ M√≥dulos importados com sucesso')
    
    // 2. Verificar estado inicial
    console.log('üìä Estado inicial:')
    const initialInfo = await debugUserState.getInfo()
    console.log(initialInfo)
    
    // 3. Iniciar monitoramento autom√°tico
    console.log('üöÄ Iniciando monitoramento autom√°tico...')
    await debugUserState.startMonitoring()
    
    // 4. Executar verifica√ß√£o manual
    console.log('üîç Executando verifica√ß√£o manual de consist√™ncia...')
    const consistencyReport = await debugUserState.checkConsistency()
    console.log('üìã Relat√≥rio de consist√™ncia:', consistencyReport)
    
    // 5. Comparar componentes
    console.log('üîç Comparando dados entre componentes...')
    const comparison = await debugUserState.compareComponents()
    console.log('üìä Compara√ß√£o de componentes:', comparison)
    
    // 6. Verificar m√©tricas
    console.log('üìà Verificando m√©tricas...')
    const metrics = debugUserState.getMetrics()
    console.log('üìä M√©tricas atuais:', { count: metrics.length, recent: metrics.slice(-3) })
    
    // 7. Testar auto-corre√ß√£o se necess√°rio
    if (!consistencyReport.isConsistent) {
      console.log('üîß Inconsist√™ncias detectadas, testando auto-corre√ß√£o...')
      const fixResult = await debugUserState.autoFix()
      console.log('üîß Resultado da auto-corre√ß√£o:', fixResult)
    }
    
    console.log('‚úÖ Teste de detec√ß√£o de inconsist√™ncias conclu√≠do')
    
    return {
      success: true,
      initialState: initialInfo,
      consistencyReport,
      comparison,
      metricsCount: metrics.length
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste de detec√ß√£o de inconsist√™ncias:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

/**
 * Demonstra comandos de debug dispon√≠veis
 */
export function showDebugCommands() {
  console.log('üõ†Ô∏è Comandos de debug dispon√≠veis:')
  console.log('')
  console.log('=== UserStateManager ===')
  console.log('debugUserState.getInfo()              - Informa√ß√µes completas do estado')
  console.log('debugUserState.startMonitoring()      - Iniciar monitoramento autom√°tico')
  console.log('debugUserState.stopMonitoring()       - Parar monitoramento autom√°tico')
  console.log('debugUserState.checkConsistency()     - Verifica√ß√£o manual de consist√™ncia')
  console.log('debugUserState.compareComponents()    - Comparar dados entre componentes')
  console.log('debugUserState.forceSync()            - For√ßar sincroniza√ß√£o')
  console.log('debugUserState.autoFix()              - Executar auto-corre√ß√£o')
  console.log('')
  console.log('=== M√©tricas e Hist√≥rico ===')
  console.log('debugUserState.getMetrics()           - Obter m√©tricas de consist√™ncia')
  console.log('debugUserState.getInconsistencyHistory() - Hist√≥rico de inconsist√™ncias')
  console.log('debugUserState.clearHistory()         - Limpar hist√≥rico')
  console.log('')
  console.log('=== DataConsistencyValidator ===')
  console.log('debugUser.checkConsistency()          - Verificar consist√™ncia')
  console.log('debugUser.compareComponents()         - Comparar componentes')
  console.log('debugUser.forceSync()                 - For√ßar sincroniza√ß√£o')
  console.log('debugUser.autoFix()                   - Auto-corre√ß√£o')
  console.log('debugUser.getInconsistencyHistory()   - Hist√≥rico de inconsist√™ncias')
  console.log('')
  console.log('=== UserStateManager Direto ===')
  console.log('userStateManager.getDebugInfo()       - Info de debug do UserStateManager')
  console.log('userStateManager.forceRefresh()       - For√ßar refresh')
  console.log('userStateManager.invalidateCache()    - Invalidar cache')
  console.log('')
  console.log('üí° Dica: Execute testConsistencyDetection() para um teste completo')
}

import { EnvironmentUtils } from '@/lib/utils/environment'
import { createLogger } from '@/lib/logger-factory'

const logger = createLogger('ConsistencyDetection', 'ERROR', 'Detec√ß√£o de inconsist√™ncias')

// Adicionar ao window para f√°cil acesso (apenas desenvolvimento)
EnvironmentUtils.onlyInDevelopment(() => {
  EnvironmentUtils.onlyInClient(() => {
    (window as any).testConsistencyDetection = testConsistencyDetection;
    (window as any).showDebugCommands = showDebugCommands;
    
    // Mostrar comandos automaticamente apenas se debug estiver habilitado
    setTimeout(() => {
      if (logger.isEnabled('DEBUG')) {
        logger.debug('Ferramentas de debug carregadas!')
        logger.debug('Execute showDebugCommands() para ver todos os comandos dispon√≠veis')
        logger.debug('Execute testConsistencyDetection() para testar a detec√ß√£o autom√°tica')
      }
    }, 1000)
  })
})